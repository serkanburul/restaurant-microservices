// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: table.sql

package db

import (
	"context"
)

const createTable = `-- name: CreateTable :one
INSERT INTO tables (capacity)
VALUES ($1)
    RETURNING id, capacity, created_at
`

func (q *Queries) CreateTable(ctx context.Context, capacity int32) (Table, error) {
	row := q.db.QueryRow(ctx, createTable, capacity)
	var i Table
	err := row.Scan(&i.ID, &i.Capacity, &i.CreatedAt)
	return i, err
}

const deleteTable = `-- name: DeleteTable :exec
DELETE FROM tables
WHERE id = $1
`

func (q *Queries) DeleteTable(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTable, id)
	return err
}

const getTableByID = `-- name: GetTableByID :one
SELECT id, capacity, created_at FROM tables
WHERE id = $1
`

func (q *Queries) GetTableByID(ctx context.Context, id int32) (Table, error) {
	row := q.db.QueryRow(ctx, getTableByID, id)
	var i Table
	err := row.Scan(&i.ID, &i.Capacity, &i.CreatedAt)
	return i, err
}

const listTables = `-- name: ListTables :many
SELECT id, capacity, created_at FROM tables
ORDER BY created_at DESC
`

func (q *Queries) ListTables(ctx context.Context) ([]Table, error) {
	rows, err := q.db.Query(ctx, listTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Table
	for rows.Next() {
		var i Table
		if err := rows.Scan(&i.ID, &i.Capacity, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTable = `-- name: UpdateTable :exec
UPDATE tables
SET capacity = $1
WHERE id = $2
`

type UpdateTableParams struct {
	Capacity int32
	ID       int32
}

func (q *Queries) UpdateTable(ctx context.Context, arg UpdateTableParams) error {
	_, err := q.db.Exec(ctx, updateTable, arg.Capacity, arg.ID)
	return err
}
