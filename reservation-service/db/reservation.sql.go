// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reservation.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTableReservation = `-- name: CreateTableReservation :one
INSERT INTO reservation (token, name, email, status, table_no, time_slot_id, reservation_date)
VALUES ($1, $2, $3, $4, $5, $6, $7)
    RETURNING id, token, name, email, status, table_no, time_slot_id, reservation_date, created_at
`

type CreateTableReservationParams struct {
	Token           string
	Name            string
	Email           string
	Status          string
	TableNo         sql.NullInt32
	TimeSlotID      sql.NullInt32
	ReservationDate time.Time
}

func (q *Queries) CreateTableReservation(ctx context.Context, arg CreateTableReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, createTableReservation,
		arg.Token,
		arg.Name,
		arg.Email,
		arg.Status,
		arg.TableNo,
		arg.TimeSlotID,
		arg.ReservationDate,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.TableNo,
		&i.TimeSlotID,
		&i.ReservationDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReservationByToken = `-- name: DeleteReservationByToken :exec
DELETE FROM reservation
WHERE token = $1
`

func (q *Queries) DeleteReservationByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteReservationByToken, token)
	return err
}

const getReservationByToken = `-- name: GetReservationByToken :one
SELECT r.name, r.email, r.status, r.table_no, r.reservation_date, r.created_at, ta.capacity, t.start_time FROM reservation r
JOIN tables ta ON r.table_no = ta.id
JOIN time_slots t ON r.time_slot_id = t.id
WHERE token = $1
`

type GetReservationByTokenRow struct {
	Name            string
	Email           string
	Status          string
	TableNo         sql.NullInt32
	ReservationDate time.Time
	CreatedAt       sql.NullTime
	Capacity        int32
	StartTime       time.Time
}

func (q *Queries) GetReservationByToken(ctx context.Context, token string) (GetReservationByTokenRow, error) {
	row := q.db.QueryRow(ctx, getReservationByToken, token)
	var i GetReservationByTokenRow
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Status,
		&i.TableNo,
		&i.ReservationDate,
		&i.CreatedAt,
		&i.Capacity,
		&i.StartTime,
	)
	return i, err
}

const getReservationsByDateAndCapacity = `-- name: GetReservationsByDateAndCapacity :many
SELECT r.table_no, t.start_time
FROM reservation r
         RIGHT JOIN time_slots t
                    ON r.time_slot_id = t.id
         JOIN tables
              ON r.table_no = tables.id
WHERE r.reservation_date = $1 AND
    tables.capacity = $2
`

type GetReservationsByDateAndCapacityParams struct {
	ReservationDate time.Time
	Capacity        int32
}

type GetReservationsByDateAndCapacityRow struct {
	TableNo   sql.NullInt32
	StartTime time.Time
}

func (q *Queries) GetReservationsByDateAndCapacity(ctx context.Context, arg GetReservationsByDateAndCapacityParams) ([]GetReservationsByDateAndCapacityRow, error) {
	rows, err := q.db.Query(ctx, getReservationsByDateAndCapacity, arg.ReservationDate, arg.Capacity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReservationsByDateAndCapacityRow
	for rows.Next() {
		var i GetReservationsByDateAndCapacityRow
		if err := rows.Scan(&i.TableNo, &i.StartTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservations = `-- name: ListReservations :many
SELECT id, token, name, email, status, table_no, time_slot_id, reservation_date, created_at FROM reservation
ORDER BY reservation_date DESC
`

func (q *Queries) ListReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, listReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Name,
			&i.Email,
			&i.Status,
			&i.TableNo,
			&i.TimeSlotID,
			&i.ReservationDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE reservation
SET name = $1, status = $2, table_no = $3, reservation_date = $4, time_slot_id = $5
WHERE token = $6
RETURNING id, token, name, email, status, table_no, time_slot_id, reservation_date, created_at
`

type UpdateReservationParams struct {
	Name            string
	Status          string
	TableNo         sql.NullInt32
	ReservationDate time.Time
	TimeSlotID      sql.NullInt32
	Token           string
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, updateReservation,
		arg.Name,
		arg.Status,
		arg.TableNo,
		arg.ReservationDate,
		arg.TimeSlotID,
		arg.Token,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.TableNo,
		&i.TimeSlotID,
		&i.ReservationDate,
		&i.CreatedAt,
	)
	return i, err
}
