// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_slots.sql

package db

import (
	"context"
	"time"
)

const getTimeSlot = `-- name: GetTimeSlot :one
SELECT id, start_time, end_time FROM time_slots
WHERE start_time = $1
`

func (q *Queries) GetTimeSlot(ctx context.Context, startTime time.Time) (TimeSlot, error) {
	row := q.db.QueryRow(ctx, getTimeSlot, startTime)
	var i TimeSlot
	err := row.Scan(&i.ID, &i.StartTime, &i.EndTime)
	return i, err
}

const listTimeSlots = `-- name: ListTimeSlots :many
SELECT id, start_time, end_time FROM time_slots
ORDER BY id DESC
`

func (q *Queries) ListTimeSlots(ctx context.Context) ([]TimeSlot, error) {
	rows, err := q.db.Query(ctx, listTimeSlots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TimeSlot
	for rows.Next() {
		var i TimeSlot
		if err := rows.Scan(&i.ID, &i.StartTime, &i.EndTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
